<project name="MoonshineBuildScriptLibrary" basedir="." default="checkOS" >
	<description>
		This is a library shared ANT tasks to be used for building ElCapitan Sandbox test project.
	</description>
 	
	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
	</tstamp>
	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->
	
	<!-- Compilers and Flex SDK configuration -->
	<xmlproperty file="ApplicationProperties.xml" keeproot="false" semanticattributes="true" prefix="APP_PROPERTIES"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="ant-contrib-0.6.jar"/>
	<property name="keepDebugFiles" value="${APP_PROPERTIES.keepDebugFiles}" />
	<property name="deploy_dir" value="DEPLOY"/>
	<property name="debug_dir" value="bin-debug"/>

	<property name="IsDesktopBuild" value="${APP_PROPERTIES.isDesktop}"/>
	<property name="IsDevelopmentBuild" value="${APP_PROPERTIES.isDevelopmentVersion}"/>
	<property name="BuildVersion" value="${APP_PROPERTIES.buildVersion}"/>
	<property name="Is.Signed.Build" value="${APP_PROPERTIES.isSignedBuild}"/>
	<property name="certSignedAIR" value="${APP_PROPERTIES.certSignedAIR}" />
	<property name="certSignedAIRPassword" value="${APP_PROPERTIES.certSignedAIRPass}" />
	<property name="certSignedWindowsBinary" value="${APP_PROPERTIES.certSignedWindowsBinary}" />
	<property name="certSignedWindowsBinaryPassword" value="${APP_PROPERTIES.certSignedWindowsBinaryPass}" />
	<property name="certSignedDevIDKeychainName" value="${APP_PROPERTIES.certSignedDevIDKeychainName}" />
	<property name="certSignedMacOSKeychainName" value="${APP_PROPERTIES.certSignedMacOSKeychainName}" />
	<property name="certSignedMacOSKeychainInstallerName" value="${APP_PROPERTIES.certSignedMacOSKeychainInstallerName}" />
	<property name="certSignedMacOSKeychainPass" value="${APP_PROPERTIES.certSignedMacOSKeychainPass}" />
	<property name="svn.revision" value="3913"/>
	
	<echo>OS BIT : ${os.arch}</echo>
	<if>
		<os family="windows"/>
		<then>
			<if>
				<os arch="x86"/>
				<then>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath" silent="true" />
				</then>
				<else>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath64" silent="true" />
				</else>
			</if>
		</then>
		<else>
			<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.unixSDKPath" silent="true" />
		</else>
	</if>
	
	<condition property="Is.FLEX_HOME.Not.Exists" else="false">
		<or>
			<and>
				<equals arg1="${FLEX_HOME}" arg2=""/>
			</and>
			<not>
				<available file="${FLEX_HOME}"/>
			</not>
		</or>
	</condition>
	
	<!-- Read all environment properties -->
	<property environment="env"/>
	<!-- Check and set if Flex SDK already setup as environment variable -->
	<propertycopy property="FLEX_HOME" from="env.FLEX_HOME" silent="true" override="${Is.FLEX_HOME.Not.Exists}"/>
	<echo>SDK : ${FLEX_HOME}</echo>
	
    <!-- Path to your Flex SDK with AIR 3.1 overlaid -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
    <property name="mxmlc_path" value="${FLEX_HOME}/lib/mxmlc.jar" />
    <property name="adt_path" value="${FLEX_HOME}/lib/adt.jar" />
 
    <!-- Application configuration -->
    <property name="swfFilename" value="${debug_dir}/XHTMLConverterCLI.swf" />
	<property name="applicationSourceDirectory" value="../src"/>
	<property name="desktopMainSource" value="${applicationSourceDirectory}/XHTMLConverterCLI.as" />
	<property name="desktopApplicationDescriptor" value="${debug_dir}/XHTMLConverterCLI-app.xml" />
	<property name="desktopApplicationDescriptorOriginal" value="${applicationSourceDirectory}/XHTMLConverterCLI-app.xml" />
	
	<!-- Desktop configuration -->
	<property name="certSelfSignedNameOnly" value="MoonshineSelfSignedCertificate" />
	<property name="certSelfSigned" value="MoonshineSelfSignedCertificate.p12" />
	<property name="certSelfSignedPassword" value="moonshine" />
	
	<condition property="Is.Keychain.Certificate.Defined">
		<and>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2="CERT_OSX_KEYCHAIN_INSTALLER"/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2="CERT_OSX_KEYCHAIN_PASS"/>
			</not>
		</and>
	</condition>
	<echo>Is.Keychain.Certificate.Defined: ${Is.Keychain.Certificate.Defined}</echo>
	
	
	<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================
	-->
	
	<!-- OS Check and decision on opening Task -->
	<target name="checkOS">
		<if>
			<equals arg1="${IsDesktopBuild}" arg2="true"/>
			<!-- consider a desktop build -->
			<then>
				<if>
					<os family="windows"/>
					<then>
						<property name="isOSX" value="false"/>
						<antcall target="disposeTempWindows"></antcall>
					</then>
					<elseif>
						<os family="unix"/>
						<then>
							<property name="isOSX" value="true"/>
							<antcall target="disposeTempUNIX"></antcall>
						</then>
					</elseif>
				</if>
			</then>
		</if>
	</target>

	<!-- Create a certificate if it doesn't exist already -->
	<target name="createCertificate" unless="certSelfSigned.exists">
		<echo>Self-signed .p12 certificate generation</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-certificate" />
			<arg line="-cn '${certSelfSignedNameOnly}'" />
			<arg line="2048-RSA" />
	   		<arg line="${certSelfSigned}" />
	   		<arg line="${certSelfSignedPassword}"/>
		</java>
		<copy file="${certSelfSigned}" todir="${debug_dir}" overwrite="true"/>
	 </target>
	
	<!--
	//==========================================================================
	//
	//  WINDOWS
	//
	//==========================================================================
	-->
	
	<!-- Windows signed packaging initiator -->
	<target name="signedSigningBuild" if="${Is.Signed.Build}">
		<antcall target="CompileSWFWindowsSignedPackage"></antcall>
	</target>

	<!-- Windows packaging/signing Task -->
	<target name="CompileSWFWindowsSignedPackage" depends="CompileSWF">
		<echo>Signed Process Running</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}'" />
	   		<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.comodoca.com/rfc3161'" />
	   		<arg line="-target native"/>
	   		<arg line="-storetype pkcs12" />
	   		<arg line="-keystore '${certSignedWindowsBinary}'" />
	   		<arg line="-storepass '${certSignedWindowsBinaryPassword}'" />
	   		<arg line="${desktopBinaryFilename}" />
	   		<arg line="'${desktopApplicationDescriptor}'" />
	   		<arg line="'${swfFilename}'" />
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
	 </target>
	
	<!-- Windows self-signed packaging initiator -->
	<target name="normalSigningBuild" unless="${Is.Signed.Build}">
		<antcall target="CompileSWFWindowsSelfSignedPackage"></antcall>
	</target>

	 <!-- Windows packaging/signing Task -->
	<target name="CompileSWFWindowsSelfSignedPackage" depends="CompileSWF">
		<echo>Self-signed Process Running</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}'" />
	   		<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.comodoca.com/rfc3161'" />
	   		<arg line="-target native"/>
	   		<arg line="${desktopBinaryFilename}" />
	   		<arg line="'${desktopApplicationDescriptor}'" />
	   		<arg line="'${swfFilename}'" />
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
	 </target>
	
	<!--
	//==========================================================================
	//
	//  MACOS
	//
	//==========================================================================
	-->
	
	<!-- Compile .app to next use in .pkg building -->
	<!--target name="compile app project" depends="compile dmg project"-->
	<target name="compile app project" depends="CompileSWF">
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${certSelfSigned}'" />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.comodoca.com/rfc3161'" />
			<arg line="-target bundle"/>
			<arg line="'${desktopBinaryFilename}'" />
			<arg line="'${desktopApplicationDescriptor}'" />
			<arg line="'${swfFilename}'" />
			<!-- Add folders to be bundled in the AIR file here -->
		</java>
	</target>
	
	<!--
	//==========================================================================
	//
	//  GLOBAL
	//
	//==========================================================================
	-->
	
	<!-- delete and recreate the DEPLOY dir -->
	<target name="init">
		<delete dir="${deploy_dir}"/>
		<delete dir="${debug_dir}" />
		<mkdir dir="${deploy_dir}" />
		<mkdir dir="${debug_dir}" />
	</target>
	
	<!-- modify in the descriptor file -->
	<target name="modifyDescriptor" depends="init" if="${IsDesktopBuild}">
		<copy file="${desktopApplicationDescriptorOriginal}" todir="${debug_dir}" overwrite="true"/>
		
		<!-- modify field values based upon isDevelopment tag -->
		<if>
			<equals arg1="${IsDevelopmentBuild}" arg2="true"/>
			<then>
				<property name="applicationID" value="net.prominic.xhtmlConverterCLI-dev"/>
				<property name="applicationName" value="XHTMLConverterCLIDev"/>
				<property name="executableName" value="XHTMLConverterCLIDev" />
				<property name="installerName" value="XHTMLConverterCLIDev" />
			</then>
			<else>
				<property name="applicationID" value="net.prominic.xhtmlConverterCLI"/>
				<property name="applicationName" value="XHTMLConverterCLI"/>
				<property name="executableName" value="XHTMLConverterCLI" />
				<property name="installerName" value="XHTMLConverterCLI" />
			</else>			
		</if>

		<!-- Check if the self-signed certificate exists -->
		<copy file="${certSelfSigned}" todir="${debug_dir}" overwrite="true"/>
		
		<if>
			<os family="unix"/>
			<then>
				<property name="desktopBinaryFilename" value="${deploy_dir}/${installerName}.app"/>
				<copy file="entitlement.plist" todir="${debug_dir}" overwrite="true"/>
			</then>
			<else>
				<property name="desktopBinaryFilename" value="${deploy_dir}/${installerName}.exe"/>
			</else>
		</if>
		
		<replaceregexp file="${desktopApplicationDescriptor}" match="filenameToBeReplacedByANT" replace="${executableName}" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="nameToBeReplacedByANT" replace="${applicationName} ${BuildVersion}" encoding="utf-8" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="idToBeReplacedByANT" replace="${applicationID}" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="0.0.0" replace="${BuildVersion}" />
		<replace file="${desktopApplicationDescriptor}" token="[This value will be overwritten by Flash Builder in the output app.xml]" value="${swfFilename}" />
	</target>
	
	<!-- Compile SWF to build directory for desktop packaging -->
	<target name="CompileSWF" depends="modifyDescriptor">
		<mxmlc file="${desktopMainSource}" 
			   output="${swfFilename}" 
			   swf-version="39" 
			   configname="air" 
			   fork="true" 
			   optimize="true" 
			   debug="false" 
			   actionscript-file-encoding="UTF-8" 
			   incremental="false"
			   keep-generated-actionscript="false"
			   allow-source-path-overlap="true">
			<load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
			<source-path path-element="${applicationSourceDirectory}"/>
			<compiler.library-path dir="../libs" append="true">
				<include name="*.swc" />
			</compiler.library-path>
		</mxmlc>
	</target>
	
	<!-- Deletes temporary files for Windows -->
	<target name="disposeTempWindows" depends="normalSigningBuild,signedSigningBuild">
		<if>
			<equals arg1="${keepDebugFiles}" arg2="false"/>
			<then>
				<delete dir="${debug_dir}" />
			</then>
		</if>
	</target>
	
	<!-- Deletes temporary files for macOS -->
	<target name="disposeTempUNIX" depends="compile app project">
		<if>
			<equals arg1="${keepDebugFiles}" arg2="false"/>
			<then>
				<delete dir="${debug_dir}" />
			</then>
		</if>
	</target>
</project>